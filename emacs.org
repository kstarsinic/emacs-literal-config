#+TITLE: Making Emacs Work For Me
#+AUTHOR: Joost Diepenmaat
#+EMAIL: joost@zeekat.nl


* Configuring Emacs: A Yak Shaving Diary

  This is my âˆžth attempt at creating a readable and maintainable Emacs
  configuration. I'm hopeful that using Org-Babel and a literate
  programming style will help tame the bit-rot and spaghettification.

* How to use my configuration

** Obtaining the source

   You can find the latest public version of the configuration in [[https://github.com/joodie/emacs-literal-config/][the
   Github repository]]. The meat of it (and the source of this
   document) is the ~emacs.org~ file.

** Installation

   This configuration is intended to be installable from scratch. It
   uses [[https://github.com/cask/cask][Cask]] to specify the package dependencies. [[https://github.com/rdallasgray/pallet][Pallet]] is installed
   to sync actual installed packages with the dependency spec.

** Installation procedure

  - Install GNU Emacs 24 or higher
  - Install Cask from https://github.com/cask/cask
  - Clone [[https://github.com/joodie/emacs-literal-config][the repository]] as ~$HOME/.emacs.d~ (or symlink it to that
    directory).
  - Run ~cask install~ in ~$HOME/.emacs.d~
  - Start Emacs

** Issues installing

  - Emacs failing to load pallet can indicate that ~cask~ is
    attempting to install packages using a different Emacs version
    than the one you're starting. Check your ~$PATH~ and/or aliases.

* Graphics and looks
** Color theme
   Leuven theme is awesome!

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     ;(load-theme 'light-blue)
     (load-theme 'wombat)
   #+END_SRC

** Font

   I like [[http://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]], but it doesn't support a wide range of Unicode
   characters, so I fall back on [[http://dejavu-fonts.org/wiki/Main_Page][DejaVu Sans]] for those.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil
                         :family "Inconsolata"
                         :height 130
                         :weight 'normal
                         :width 'normal)

     (when (functionp 'set-fontset-font)
       (set-fontset-font "fontset-default"
                         'unicode
                         (font-spec :family "DejaVu Sans Mono"
                                    :width 'normal
                                    :size 12.4
                                    :weight 'normal)))

   #+END_SRC

** Reduce clutter

   Remove the toolbar. It's ugly and I never use it. Also remove the
   scroll bars; below, I set up the fringe to show my position in a
   buffer.

   #+name: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (window-system)
       (tool-bar-mode -1)
       (scroll-bar-mode -1))
   #+END_SRC

   When running emacs in a terminal, remove the menu bar.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (not (window-system))
       (menu-bar-mode -1))
   #+END_SRC

** Mode line

   I'm using smart mode line to clean up the modeline display a little.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     ;(sml/setup)
     ;(sml/apply-theme 'respectful)
     ;(setq sml/shorten-directory t)
     ;(setq sml/shorten-modes t)
   #+END_SRC

** Scrolling behavior

   Emacs's default scrolling behavior, like a lot of the default
   Emacs experience, is pretty idiosyncratic. The following snippet
   makes for a smoother scrolling behavior when using keyboard
   navigation.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq redisplay-dont-pause t
           scroll-margin 1
           scroll-step 1
           scroll-conservatively 10000
           scroll-preserve-screen-position 1)
   #+END_SRC

   This snippet makes mouse wheel and trackpad scrolling
   bearable. Scroll in 1-line increments the buffer under the mouse.

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-follow-mouse 't)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
   #+END_SRC

** Buffer names
   Setup uniquify so that non-unique buffer names get the parent path
   included to make them unique.
   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
   #+END_SRC

** Window configuration
   Using sticky windows means I can keep a selected window visible
   (using "C-x 9") when deleting windows (with "C-x 0" and "C-x 1").

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (require 'sticky-windows)

     (global-set-key     [(control x) (?0)]        'sticky-window-delete-window)
     (global-set-key     [(control x) (?1)]        'sticky-window-delete-other-windows)
     (global-set-key     [(control x) (?9)]        'sticky-window-keep-window-visible)

   #+END_SRC

** Window systems and terminals.
   Emacs runs very fine in a terminal as is, but there are a few
   tweaks that make terminal usage even nicer.

*** Make mouse clicks work in xterm (and iTerm).

   #+NAME: look-and-feel
   #+BEGIN_SRC emacs-lisp
     (when (not (window-system))
       (xterm-mouse-mode +1))
   #+END_SRC
   
* Start up

  Start with the scratch buffer; no start up screen.

  #+NAME: startup
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-screen +1)
  #+END_SRC

* Formatting and white-space

  #+name: formatting
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
  #+END_SRC

* Programming

** Pair programming

   Normally, I think line numbers in code editors just take up space,
   but they can be useful when pair programming; calling out a line
   number is probably more efficient than pointing at the screen.

   I wrapped this in a global minor mode so turning that stuff on and
   off is easy.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp

     (define-minor-mode my/pair-programming-mode
       "Toggle visualizations for pair programming.

     Interactively with no argument, this command toggles the mode.  A
     positive prefix argument enables the mode, any other prefix
     argument disables it.  From Lisp, argument omitted or nil enables
     the mode, `toggle' toggles the state.

     This turns on hightlighting the current line, line numbers and
     command-log-mode."
       ;; The initial value.
       nil
       ;; The indicator for the mode line.
       " Pairing"
       ;; The minor mode bindings.
       '()
       :group 'my/pairing
       (my/set-modes (if my/pair-programming-mode 1 -1)
                     '(linum hl-line command-log)))

     (define-global-minor-mode my/global-pair-programming-mode
       my/pair-programming-mode
       (lambda () (my/pair-programming-mode 1)))

     (global-set-key "\C-c\M-p" 'my/global-pair-programming-mode)
   #+END_SRC

** Perl
   I still occasionally need to work on Perl code, so I have a few
   basic settings to make that reasonably painless.

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (fset 'perl-mode 'cperl-mode) ;; force cperl mode
     (add-hook 'cperl-mode-hook (lambda (flymake-mode)))
   #+END_SRC
** Javascript

   I use JS2-mode for javascript source.
   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . js2-mode))
   #+END_SRC

** JSON

   For JSON-formatted files, I use the default js-mode, which accepts
   top-level bare objects (which is incorrect behaviour for
   javascript, but the default in JSON).

   #+name: programming-setup
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json\\'\\|\\.jshintrc\\'" . js-mode))
   #+END_SRC

** Compilation mode improvements
*** ANSI Colors

    See http://stackoverflow.com/questions/3072648/cucumbers-ansi-colors-messing-up-emacs-compilation-buffer

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (toggle-read-only)
       (ansi-color-apply-on-region (point-min) (point-max))
       (toggle-read-only))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
    #+END_SRC

*** Follow output

    #+name: programming-setup
    #+BEGIN_SRC emacs-lisp
     (setq compilation-scroll-output t)
    #+END_SRC

* Org Mode
** Org-Trello

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     ;(require 'org-trello)
     ;(add-hook 'org-mode-hook 'org-trello-mode)
   #+END_SRC

** MobileOrg
   Use Dropbox for syncing my agenda files with my Android
   phone. Worry about the security implications later.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-mobile-directory "~/Dropbox/MobileOrg")
   #+END_SRC
** Global keys

   Short key bindings for capturing notes/links and switching to agenda.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
   #+END_SRC

   Org-Agenda needs to be loaded before calling =org-agenda= works.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
        (require 'org-agenda)
   #+END_SRC

   I prefer a forthnight's overview on the agenda.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
        (setq org-agenda-span 14)
   #+END_SRC

** Notes / Tasks / TODOs

   Make custom markers for todo items:

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     ; All these are needed for org-toodledo: TODO DELEGATED WAITING SOMEDAY CANCELED REFERENCE
     (setq org-todo-keywords '((sequence "TODO(t)" "DELEGATED" "WAITING" "SOMEDAY" "PENDING(p)" "|" "REFERENCE" "CANCELED" "DONE(d)")))
   #+END_SRC

   Automatically mark todo items with todo subitems as DONE when all
   subitems are done.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp

     (defun my-org-autodone (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'my-org-autodone)

   #+END_SRC

   I want to file and refile notes to any main header in any file in
   my =org-agenda-files= list.

   #+name: org-config
   #+BEGIN_SRC emacs-lisp
     (setq org-refile-targets '((nil :level . 1)
                                (org-agenda-files :level . 1)))

   #+END_SRC

** Org-Babel
*** Fontifying source blocks

    Enable syntax highlighting in src blocks.
    #+name: org-config
    #+BEGIN_SRC emacs-lisp
      (setq-default org-src-fontify-natively t)
    #+END_SRC

    Use the vanilla syntax highlighting (the =minted= package has too much baggage) for
    LaTeX / PDF exports.

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     ;; Include the latex-exporter
     (require 'ox-latex)
     ;; Add minted to the defaults packages to include when exporting.
     (add-to-list 'org-latex-packages-alist '("" "listings"))
     (add-to-list 'org-latex-packages-alist '("" "color"))
     ;; Let the exporter use the -shell-escape option to let latex
     ;; execute external programs.
     ;; This obviously and can be dangerous to activate!

     ;; I use pdflatex instead of xelatex because that seems to work
     ;; much better with utf-8 files
     (setq org-latex-pdf-process
           '("echo o is [%o], f is [%f]"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    #+END_SRC

    Untangle files.

    #+name: org-config
    #+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cu" 'my/org-babel-untangle)

     (defun my/org-babel-untangle (path)
       (interactive "fFile to include: ")
       (message "Untangling '%s'..." path)
       (save-current-buffer
         (let ((lang (save-current-buffer
                       (set-buffer (find-file-noselect path))
                       (my/mode->language major-mode))))
           (insert (format "\n** %s\n\n#+BEGIN_SRC %s :tangle %s\n"
                           (capitalize (replace-regexp-in-string "\\[_-\\]" " " (file-name-base path)))
                           lang
                           (file-relative-name path)))
           (forward-char (cadr (insert-file-contents path)))
           (insert "\n#+" "END_SRC\n"))))

     (defun my/mode->language (mode)
       "Return the language for the given mode"
       (intern (replace-regexp-in-string "\\-mode$" "" (my/->string mode))))

     (defun my/org-babel-untangle-tree (path)
       (interactive "Droot directory to untangle: ")
       (mapc 'my/org-babel-untangle
             (cl-remove-if 'file-directory-p
                           (f-files path (lambda (p) t) t))))

    #+END_SRC

** Language evaluation support

   Org-Babel needs to be told that evaluation of certain languages is
   allowed. I collect all languages here, then enable all of them at
   the end of the section.

   ":noweb no-export" means expand references before eval or tangle, but not before export
   #+name: org-config :noweb no-export
   #+BEGIN_SRC emacs-lisp
     (defvar my/org-babel-evaluated-languages
       '(emacs-lisp)
       "List of languages that may be evaluated in Org documents")

     <<org-config-languages>>

     (org-babel-do-load-languages
      'org-babel-load-languages
      (mapcar (lambda (lang)
                (cons lang t))
              my/org-babel-evaluated-languages))
   #+END_SRC

** Diagramming

   I like [[http://www.graphviz.org/][Graphviz]] for generating graphs. It takes a few lines of code
   to link graphviz's =dot= mode to =org-babel= so I can include dot
   source in org mode and export with nice looking diagrams.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-src-lang-modes (quote ("dot" . graphviz-dot)))

     (add-to-list 'my/org-babel-evaluated-languages 'dot)
   #+END_SRC

   [[http://ditaa.sourceforge.net/][Ditaa]] is another nice package for turning ASCII art into PNG/EPS
   diagrams. Turn that on, too.

   #+name: org-config-languages
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'ditaa)
   #+END_SRC

   PlantUml is built on top of Graphviz.

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'my/org-babel-evaluated-languages 'plantuml)
   #+END_SRC

* Toodledo

  #+name: org-toodledo-config
  #+BEGIN_SRC emacs-lisp
    (require 'org-toodledo)
    (setq org-toodledo-userid   "td4dd6c59082799")
    (setq org-toodledo-password "web66web66")
    (setq org-toodledo-file     "~/.emacs.d/toodledo.org")
  #+END_SRC

* Configuration file layout

  Here I define the emacs.el file that gets generated by the code in
  this org file.

  #+BEGIN_SRC emacs-lisp :tangle yes :noweb no-export :exports code
    ;;;; Do not modify this file by hand.  It was automatically generated
    ;;;; from `emacs.org` in the same directory. See that file for more
    ;;;; information.
    ;;;;
    ;;;; If you cannot find the `emacs.org` file, see the source
    ;;;; repository at https://github.com/joodie/emacs-literal-config

    <<environment>>
    <<tools>>
    <<customize-config>>
    <<look-and-feel>>
    <<formatting>>
    <<programming-setup>>
    <<auto-complete>>
    ; global-keys
    <<global-navigation>>
    <<org-config>>
    ; org-toodledo-config
    <<libraries>>
    <<startup>>
  #+END_SRC

* Tools

  This section defines some functionality used elsewhere in this
  configuration.

* Environment

  OSX doesn't set the environment from the shell init files for
  graphical applications, but I set PATH and a bunch of other stuff
  there. The =exec-path-from-shell= package will take care of
  that. Thanks to Ting-Yu Lin for pointing it out.

  #+NAME: environment
  #+BEGIN_SRC emacs-lisp
    (when (memq window-system '(mac ns))
      (exec-path-from-shell-initialize))
  #+END_SRC

  External packages may be dropped in the .emacs.d/ext directory.

  #+NAME: environment
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/ext")
  #+END_SRC

* Options set using the customize interface

  By default, Emacs saves the options you set via the `customize-*`
  functions in the user init file, which is "~/.emacs.d/init.el" in
  this setup. I prefer to have it put that data in a seperate file.

  #+name: customize-config
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el") ; KDS
    (load custom-file)                        ; KDS
  #+END_SRC

